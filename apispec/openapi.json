{
  "openapi": "3.0.0",
  "info": {
    "title": "HDT API",
    "version": "1.0",
    "description": "The CDNetworks ECP API is a RESTful API that allows you to manage transports and retrieve reports.",
    "contact": {}
  },
  "servers": [
    {
      "url": "https://ngapi.cdnetworks.com/hdt/v1"
    }
  ],
  "paths": {
    "/transport": {
      "get": {
        "summary": "Query transport list",
        "operationId": "get-transport",
        "description": "Get a transport list according to customer user name or transport type.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/Date"
          },
          {
            "$ref": "#/components/parameters/Accept-Encoding"
          },
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Mw-Access"
          },
          {
            "$ref": "#/components/parameters/On-Behalf-Of"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "limit",
            "description": "Indicates the maximum number of items to return, the default value is 20."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "offset",
            "description": "Indicates the starting position of the query in relation to the complete set of unpaginated items. The default value is 0."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "transportType",
            "description": "Search transports according to this specified transport type, valid values are get from api ‘/hdt/transport-types’"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "api-request-id": {
                "$ref": "#/components/parameters/Api-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transport": {
                      "type": "object",
                      "properties": {
                        "count": {
                          "type": "integer",
                          "description": "Indicates the total transports"
                        },
                        "transport-data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/transportData"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "transport": {
                        "count": 3,
                        "transport-data": [
                          {
                            "transportId": 1,
                            "transportCode": "test.domain.com:26666",
                            "transportType": "ipport",
                            "transportName": "test.domain.com:26666",
                            "status": "enabled"
                          },
                          {
                            "transportId": 2,
                            "transportCode": "useraccount-1",
                            "transportType": "vpn",
                            "transportName": "useraccount-1",
                            "status": "enabled"
                          },
                          {
                            "transportId": 3,
                            "transportCode": "useraccount-2",
                            "transportType": "socks5",
                            "transportName": "useraccount-2",
                            "status": "enabled"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "api-request-id": {
                "$ref": "#/components/parameters/Api-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "MissingDateHeader",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "MissingDateHeader"
                        },
                        "message": {
                          "type": "string",
                          "description": "Authorized request must have a Date header."
                        }
                      }
                    },
                    {
                      "title": "InvalidURI",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidURI"
                        },
                        "message": {
                          "type": "string",
                          "description": "Could not parse the specified URI."
                        }
                      }
                    },
                    {
                      "title": "InvalidDatePeriod",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidDatePeriod"
                        },
                        "message": {
                          "type": "string",
                          "description": "The date specified is invalid."
                        }
                      }
                    },
                    {
                      "title": "MissingAuthHeader",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "MissingAuthHeader"
                        },
                        "message": {
                          "type": "string",
                          "description": "The HTTP authorization header is missing."
                        }
                      }
                    },
                    {
                      "title": "RequestExpired",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "RequestExpired"
                        },
                        "message": {
                          "type": "string",
                          "description": "Request has expired. Timestamp date is xxx."
                        }
                      }
                    },
                    {
                      "title": "InvalidArgument",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidArgument"
                        },
                        "message": {
                          "type": "string",
                          "description": "There is a problem with a parameter name or value."
                        }
                      }
                    }
                  ],
                  "type": "object"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "MissingDateHeader",
                      "message": "Authorized request must have a Date header."
                    }
                  },
                  "example-2": {
                    "value": {
                      "error": "RequestExpired",
                      "message": "Request has expired. Timestamp date is xxx."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "AccessDenied"
                    },
                    "message": {
                      "type": "string",
                      "description": "This user is not allowed to perform this request."
                    }
                  }
                }
              }
            },
            "headers": {
              "api-request-id": {
                "$ref": "#/components/parameters/Api-Request-Id"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "api-request-id": {
                "$ref": "#/components/parameters/Api-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "AccessDenied"
                    },
                    "message": {
                      "type": "string",
                      "description": "This user is not allowed to perform this request."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "api-request-id": {
                "$ref": "#/components/parameters/Api-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "NoSuchTransportType"
                    },
                    "message": {
                      "type": "string",
                      "description": "The specified transport type does not exist."
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "NoSuchTransportType",
                      "message": "The specified transport type does not exist."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "api-request-id": {
                "$ref": "#/components/parameters/Api-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "InternalError"
                    },
                    "message": {
                      "type": "string",
                      "description": "We encountered an internal error. Please try again."
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "InternalError",
                      "message": "We encountered an internal error. Please try again."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "transports"
        ]
      },
      "post": {
        "summary": "Create a transport",
        "operationId": "post-transport",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "api-request-id": {
                "$ref": "#/components/parameters/Api-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transport": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "transportId": {
                            "$ref": "#/components/schemas/transport.id"
                          },
                          "transportCode": {
                            "$ref": "#/components/schemas/transport.code"
                          },
                          "transportType": {
                            "$ref": "#/components/schemas/transport.type"
                          },
                          "transportName": {
                            "$ref": "#/components/schemas/transport.name"
                          },
                          "cName": {
                            "$ref": "#/components/schemas/transport.cName"
                          },
                          "accessPort": {
                            "$ref": "#/components/schemas/transport.accessPort"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Ipport with empty useStandardPort": {
                    "value": {
                      "transport": {
                        "transportId": 1,
                        "transportCode": "test.domain.com:18888",
                        "transportType": "ipport",
                        "transportName": "test.domain.com:18888",
                        "cName": "access.domain.com",
                        "accessPort": 19999
                      }
                    }
                  },
                  "Ipport with non-empty useStandardPort": {
                    "value": {
                      "transport": {
                        "transportId": 1,
                        "transportCode": "test.domain.com:8080",
                        "transportType": "ipport",
                        "transportName": "test.domain.com:8080",
                        "cName": "access.domain.com",
                        "accessPort": 80
                      }
                    }
                  },
                  "vpn or socks5": {
                    "value": {
                      "transport": {
                        "transportId": 2,
                        "transportCode": "user1",
                        "transportType": "vpn",
                        "transportName": "user1",
                        "cName": "access.domain.com"
                      }
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              },
              "text/html": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              },
              "application/zip": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              },
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              },
              "text/plain": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              },
              "application/EDIFACT": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "api-request-id": {
                "$ref": "#/components/parameters/Api-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "MissingDateHeader",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "MissingDateHeader"
                        },
                        "message": {
                          "type": "string",
                          "description": "Authorized request must have a Date header."
                        }
                      }
                    },
                    {
                      "title": "InvalidURI",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidURI"
                        },
                        "message": {
                          "type": "string",
                          "description": "Could not parse the specified URI."
                        }
                      }
                    },
                    {
                      "title": "InvalidDatePeriod",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidDatePeriod"
                        },
                        "message": {
                          "type": "string",
                          "description": "The date specified is invalid."
                        }
                      }
                    },
                    {
                      "title": "MissingAuthHeader",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "MissingAuthHeader"
                        },
                        "message": {
                          "type": "string",
                          "description": "The HTTP authorization header is missing."
                        }
                      }
                    },
                    {
                      "title": "RequestExpired",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "RequestExpired"
                        },
                        "message": {
                          "type": "string",
                          "description": "Request has expired. Timestamp date is xxx."
                        }
                      }
                    },
                    {
                      "title": "MissingArgument",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "MissingArgument"
                        },
                        "message": {
                          "type": "string",
                          "description": "Required parameter is missing."
                        }
                      }
                    },
                    {
                      "title": "CNameAlreadyExists",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "CNameAlreadyExists"
                        },
                        "message": {
                          "type": "string",
                          "description": "CNAME already exists."
                        }
                      }
                    },
                    {
                      "title": "TargetDomainAndPortAlreadyExist",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "TargetDomainAndPortAlreadyExist"
                        },
                        "message": {
                          "type": "string",
                          "description": "The target domain and target port already exist."
                        }
                      }
                    },
                    {
                      "title": "UserAccountAlreadyExists",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "UserAccountAlreadyExists"
                        },
                        "message": {
                          "type": "string",
                          "description": "User account already exists."
                        }
                      }
                    },
                    {
                      "title": "InvalidCNameSuffix",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidCNameSuffix"
                        },
                        "message": {
                          "type": "string",
                          "description": "Invalid CName suffix."
                        }
                      }
                    },
                    {
                      "title": "InvalidArgument",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidArgument"
                        },
                        "message": {
                          "type": "string",
                          "description": "There is a problem with a parameter name or value."
                        }
                      }
                    },
                    {
                      "title": "InvalidUseStandardPort",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidUseStandardPort"
                        },
                        "message": {
                          "type": "string",
                          "description": "The value of field ‘useStandardPort’ is invalid."
                        }
                      }
                    },
                    {
                      "title": "AccessDomainIsRequired",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "AccessDomainIsRequired"
                        },
                        "message": {
                          "type": "string",
                          "description": "'accessDomain' is required and can’t be empty."
                        }
                      }
                    },
                    {
                      "title": "InvalidAccessDomain",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidAccessDomain"
                        },
                        "message": {
                          "type": "string",
                          "description": "The value of field ‘accessDomain’ is invalid."
                        }
                      }
                    }
                  ],
                  "type": "object"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "InvalidAccessDomain",
                      "message": "The value of field ‘accessDomain’ is invalid."
                    }
                  },
                  "example-2": {
                    "value": {
                      "error": "InvalidUseStandardPort",
                      "message": "The value of field ‘useStandardPort’ is invalid."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "UnAuthorized"
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid authentication / authorization credentials."
                    }
                  }
                }
              }
            },
            "headers": {
              "api-request-id": {
                "$ref": "#/components/parameters/Api-Request-Id"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "api-request-id": {
                "$ref": "#/components/parameters/Api-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "AccessDenied",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "AccessDenied"
                        },
                        "message": {
                          "type": "string",
                          "description": "This user is not allowed to perform this request."
                        }
                      }
                    },
                    {
                      "title": "ResourceNoAccess",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "ResourceNoAccess"
                        },
                        "message": {
                          "type": "string",
                          "description": "Read only customer can not modify resources."
                        }
                      }
                    }
                  ],
                  "type": "object"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "AccessDenied",
                      "message": "This user is not allowed to perform this request."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "api-request-id": {
                "$ref": "#/components/parameters/Api-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "NoSuchTransportType",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "NoSuchTransportType"
                        },
                        "message": {
                          "type": "string",
                          "description": "The specified transport type does not exist."
                        }
                      }
                    },
                    {
                      "title": "DistributeConfigFailed",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "DistributeConfigFailed"
                        },
                        "message": {
                          "type": "string",
                          "description": "HDT system error. Please contact HDT support team."
                        }
                      }
                    }
                  ],
                  "type": "object"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "NoSuchTransportType",
                      "message": "The specified transport type does not exist."
                    }
                  },
                  "example-2": {
                    "value": {
                      "error": "DistributeConfigFailed",
                      "message": "HDT system error. Please contact HDT support team."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "api-request-id": {
                "$ref": "#/components/parameters/Api-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "InternalError"
                    },
                    "message": {
                      "type": "string",
                      "description": "We encountered an internal error. Please try again."
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Create a transport and associate it with the calling customer. It should return a transportId,  a transportCode, a transportName, a transportType, a CNAME and an accessPort to calling customer.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/Date"
          },
          {
            "$ref": "#/components/parameters/Accept-Encoding"
          },
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Mw-Access"
          },
          {
            "$ref": "#/components/parameters/On-Behalf-Of"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "transport": {
                    "type": "array",
                    "description": "Root element of request body.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "transportType": {
                          "$ref": "#/components/schemas/transport.type"
                        },
                        "transportName": {
                          "$ref": "#/components/schemas/transport.name"
                        },
                        "targetDomain": {
                          "$ref": "#/components/schemas/transport.targetDomain"
                        },
                        "targetPort": {
                          "$ref": "#/components/schemas/transport.targetPort"
                        },
                        "useFtp": {
                          "$ref": "#/components/schemas/transport.useFtp"
                        },
                        "cName    ": {
                          "$ref": "#/components/schemas/transport.cName"
                        },
                        "userAccount": {
                          "$ref": "#/components/schemas/transport.userAccount"
                        },
                        "userPwd": {
                          "$ref": "#/components/schemas/transport.userPwd"
                        },
                        "accessDomain": {
                          "$ref": "#/components/schemas/transport.accessDomain"
                        },
                        "useStandardPort": {
                          "$ref": "#/components/schemas/transport.useStandardPort"
                        },
                        "ipWhiteList": {
                          "$ref": "#/components/schemas/transport.ipWhiteList"
                        },
                        "useUdp": {
                          "$ref": "#/components/schemas/transport.useUdp"
                        },
                        "status": {
                          "$ref": "#/components/schemas/transport.status"
                        },
                        "comments": {
                          "$ref": "#/components/schemas/transport.comments"
                        }
                      },
                      "required": [
                        "transportType",
                        "targetDomain",
                        "targetPort",
                        "useFtp",
                        "userAccount",
                        "userPwd",
                        "accessDomain"
                      ]
                    }
                  }
                },
                "required": [
                  "transport"
                ]
              }
            }
          },
          "description": ""
        },
        "tags": [
          "transports"
        ]
      }
    },
    "/report/flow": {
      "get": {
        "summary": "Query the traffic volume for your transport",
        "tags": [
          "reports"
        ],
        "responses": {},
        "operationId": "get-report",
        "description": "Get the usage report.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header"
          }
        ]
      },
      "parameters": []
    }
  },
  "components": {
    "schemas": {
      "transport.id": {
        "title": "transportId",
        "type": "integer",
        "description": "Indicates an transport id, it is a unique integer number in HDT System."
      },
      "transport.code": {
        "title": "transportCode",
        "type": "string",
        "description": "if transport type of this transport is ipport, it uses this form ‘targetDomain:targetPort’ to represent. if transport type of this transport is vpn or socks5, it uses ‘userAccount’ to represent."
      },
      "transport.type": {
        "title": "transportType",
        "type": "string",
        "description": "Indicates transport type which this transport is belonged to."
      },
      "transport.name": {
        "title": "transportName",
        "type": "string",
        "description": "Represent a transport."
      },
      "transport.targetDomain": {
        "title": "targetDomain",
        "type": "string",
        "description": "A domain/IP refers to the destination server of customer application, HDT would access this domain/IP to get data from original server. When transport type is ipport, this parameter is valid and required. It can be a domain name or an ip. The length of it must be less than or equal to 250."
      },
      "transport.targetPort": {
        "title": "targetPort",
        "type": "integer",
        "description": "When transport type is ipport, this parameter is valid and required. It must be an integer and range between 1-65535. "
      },
      "transport.useFtp": {
        "title": "useFtp",
        "type": "boolean",
        "description": "Indicates whether to use ftp transport."
      },
      "transport.cName": {
        "type": "string",
        "title": "cName",
        "description": "The cName HDT generates for a transport, customer could use the cName to redirect the traffic to HDT platform.",
        "format": "hostname"
      },
      "transport.accessPort": {
        "title": "accessPort",
        "type": "integer",
        "description": "Indicates access port, when transport type is 'ipport'. HDT API Server will generate an available port to return. When useStandardPort is 'http', this parameter is 80, when useStandardPort is 'sni', this parameter is 443."
      },
      "transport.userAccount": {
        "title": "userAccount",
        "type": "string",
        "description": "Indicates a user account for accessing HDT system, when transport type is vpn or socks5."
      },
      "transport.userPwd": {
        "title": "userPwd",
        "type": "string",
        "description": "Indicates a user password for accessing HDT system, when transport type is vpn or socks5."
      },
      "transport.useUdp": {
        "title": "useUdp",
        "type": "boolean",
        "description": "Indicates whether to use udp transport. "
      },
      "transport.useStandardPort": {
        "title": "useStandardPort",
        "type": "string",
        "description": "Indicates the type of protocol, which support port sharing feature, such as \"http\", \"sni\". It is just valid for transport type 'ipport'. The valid values are get from api '/hdt/transport-protocol-types', and default value is empty string."
      },
      "transport.accessDomain": {
        "title": "accessDomain",
        "type": "string",
        "description": "Indicates the access domain of accelerated application for the public users. It supports multiple domains separated by commas and  wildcard to match multiple subdomains, currently we support the format of: \"*.domain.com\".\n\nFor example:\naaa.domain1.com,*.domain2.com,*.domain3.org.cn\n\nNote:\n1. Currently HDT does not support more than one level subdomains for \"accessDomain\" field;\n2. 'accessDomain' can't be empty; \n3. When 'useStandardPort' is not empty, the value of combination of 'accessDomain' field and 'useStandardPort' field must be globally unique;\n4. When 'useStandardPort' is empty, the value of 'accessDomain' is unique to each customer. Transports belong to the same  customer can use the same 'accessDomain'.",
        "x-examples": {
          "example-1": {
            "accessDomain": "aaa.domain1.com"
          },
          "example-2": {
            "accessDomain": "*.domain2.com"
          }
        }
      },
      "transport.status": {
        "type": "string",
        "title": "status",
        "description": "Indicates the status of this transport, it must be disabled or enabled. Default value is enabled. If status is disabled, this transport is invalid. ",
        "enum": [
          "enabled",
          "disabled"
        ]
      },
      "transport.speedLimit": {
        "title": "speedLimit",
        "description": "Indicates the speed limit in Mbps. ",
        "type": "number"
      },
      "transport.concurrentLimit": {
        "title": "concurrentLimit",
        "type": "integer",
        "description": "Indicates the concurrent limit."
      },
      "transport.strategy": {
        "title": "transportStrategy",
        "type": "string",
        "description": "Indicates the transport strategy."
      },
      "transport.ipWhiteList": {
        "type": "string",
        "title": "ipWhiteList",
        "description": "Indicates the ip white-list. Valid values are ip, ip segment, ip range or the combination of them separated by semicolons. Spaces, '\\t', '\\r' or '\\r\\n'(which will be  removed before validating)  can only appear in front of or behind ip, ip segment and ip range(The range format should be \"A.B.C.D-A.B.C.E\" and E should greater than D.), but can not be included in them, Default value is blank string.\n\nFor example:\nvalid:\n 11.11.12.3/20;  2.3.4.5-2.3.4.10;\n21.12.45.18\n\nInvalid:\n 11.11. 12.3/20;  2.3.4.5-2.3.\n4.10;\n21.12.45.18",
        "x-examples": {
          "example-1": {
            "ipWhiteList": "11.11.12.3/20;  2.3.4.5-2.3.4.10; 21.12.45.18"
          }
        }
      },
      "transport.comments": {
        "title": "comments",
        "type": "string",
        "description": "Comment or description for customer to make some notes."
      },
      "transportData": {
        "title": "transport-data",
        "type": "object",
        "description": "this container contains \"transportId\", \"transportCode\", \"transportType\", \"transportName\" and \"status\" element for describing one transport.",
        "properties": {
          "transportId": {
            "$ref": "#/components/schemas/transport.id"
          },
          "transportCode": {
            "$ref": "#/components/schemas/transport.code"
          },
          "transportType": {
            "$ref": "#/components/schemas/transport.type"
          },
          "transportName": {
            "$ref": "#/components/schemas/transport.name"
          },
          "status": {
            "$ref": "#/components/schemas/transport.status"
          }
        }
      }
    },
    "parameters": {
      "Authorization": {
        "name": "Authorization",
        "in": "header",
        "description": "Authorization string for the request.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "Date": {
        "name": "Date",
        "in": "header",
        "description": "The date and time of the request.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "Accept-Encoding": {
        "name": "Accept-Encoding",
        "in": "header",
        "description": "Indicates the compression format of response data, supports \"gzip\" and \"uncompressed\", default value is \"uncompressed\".",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "Accept": {
        "name": "Accept",
        "in": "header",
        "description": "Indicates the response format, supports \"application/json\" and \"application/xml\", default value is \"application/json\".",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "Mw-Access": {
        "name": "Mw-Access",
        "in": "header",
        "description": "Indicates the customer id. It is \"impersonation\" and  it’s not exposed to the customers. It is only for admin use.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "Api-Request-Id": {
        "name": "Api-Request-Id",
        "in": "header",
        "description": "A string automatically generated by the api server to identify each request.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "On-Behalf-Of": {
        "name": "On-Behalf-Of",
        "in": "header",
        "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic",
        "description": "All requests to CDNetworks' platform must be authenticated using an API login name and key assigned to your organization. For security, the API key is not passed directly but is secured as described below. \n\nThe authentication type is HTTP Basic, and the authorization string is specified in the HTTP request header called Authorization.\n```\n#!/bin/bash\n#URL of the CDN360 API server\nAPI_SERVER=https://ngapi.cdnetworks.com\n\n#You will be given the following information by the CDNetworks sales team\nUSER=\"{API user name}\"\nAPI_KEY=\"{API key (make sure to escape the $ sign if any)}\"\n\n#Date in RFC 1123 format\nDATE=`date \"+%a, %d %b %Y %H:%M:%S %Z\"`\n\n#Generate the password. Raw output from openssl by adding the \"-binary\" flag\npassw=$(echo -n \"$DATE\" | openssl dgst -sha1 -hmac \"$API_KEY\" -binary | base64)\necho \" \"\n\n#Construct the curl command to query list of applications\napiCall =\"curl -i --url '${API_SERVER}/ecp/v1/applications'\n                  -X GET\n                  -u $USER:$passw\n                  -H 'Date: $DATE'\n                  -H 'Accept: application/json'\"\neval $apiCall\necho \" \"\n```\n If you are a reseller, you can also specify a child customer's ID in an On-Behalf-Of HTTP header to make API calls to manage your child customer."
      }
    }
  },
  "tags": [
    {
      "name": "transports",
      "description": "Configure your HDT transports."
    },
    {
      "name": "reports",
      "description": "Call our report APIs to get information about the usage of your HDT transports."
    }
  ]
}
