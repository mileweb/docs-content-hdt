{
  "openapi": "3.0.0",
  "info": {
    "title": "hello world 2",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "paths": {},
  "components": {
    "schemas": {
      "hello": {
        "title": "hello",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "world": {
        "title": "world",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "Basic",
        "description": "All requests to CDNetworks' platform must be authenticated using an API login name and key assigned to your organization. For security, the API key is not passed directly but is secured as described below. \n\nThe authentication type is HTTP Basic, and the authorization string is specified in the HTTP request header called Authorization.\n```\n#!/bin/bash\n#URL of the CDN360 API server\nAPI_SERVER=https://ngapi.cdnetworks.com\n\n#You will be given the following information by the CDNetworks sales team\nUSER=\"{API user name}\"\nAPI_KEY=\"{API key (make sure to escape the $ sign if any)}\"\n\n#Date in RFC 1123 format\nDATE=`date \"+%a, %d %b %Y %H:%M:%S %Z\"`\n\n#Generate the password. Raw output from openssl by adding the \"-binary\" flag\npassw=$(echo -n \"$DATE\" | openssl dgst -sha1 -hmac \"$API_KEY\" -binary | base64)\necho \" \"\n\n#Construct the curl command to query list of applications\napiCall =\"curl -i --url '${API_SERVER}/ecp/v1/applications'\n                  -X GET\n                  -u $USER:$passw\n                  -H 'Date: $DATE'\n                  -H 'Accept: application/json'\"\neval $apiCall\necho \" \"\n```\n If you are a reseller, you can also specify a child customer's ID in an On-Behalf-Of HTTP header to make API calls to manage your child customer."
      }     
    }
  },
  "tags": [
    {
      "name": "Applications",
      "description": "Configure your containerized application once and then distribute your application to our ECP locations across the globe."
    },
    {
      "name": "PoPs and regions",
      "description": "Get a list of ECP PoPs and regions."
    },
    {
      "name": "imagePullSecrets",
      "description": "An ImagePullSecret is a type of kubernetes secret that contains an image registry password. The secret is passed to and used by Kubelet to authenticate with your image registry and pull private images on behalf of your pod."
    },
    {
      "name": "CNAMEs",
      "description": "A Canonical Name Record (or \"CNAME\") is a DNS record used to alias one domain name to a different domain name. While your application runs on ECP, you can create a CNAME and point the hostname of your application to this CNAME. Then ECP will help manage global traffic for your application by resolving the CNAME to different IP addresses pointing to your application instances at the edge as per user/client location. Incoming requests will always be routed to the closest application instances."
    },
    {
      "name": "Reports",
      "description": "Call our report APIs to get information about your resources consumption on ECP."
    }
  ]
}
