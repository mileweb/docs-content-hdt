{
  "openapi": "3.0.0",
  "info": {
    "title": "HDT API",
    "version": "1.0",
    "description": "The CDNetworks HDT API is a RESTful API that allows you to manage transports, retrieve reports, and download logs.",
    "contact": {}
  },
  "servers": [
    {
      "url": "https://ngapi.cdnetworks.com/hdt/v1"
    }
  ],
  "paths": {
    "/transport": {
      "get": {
        "summary": "Query transport list",
        "operationId": "get-transport",
        "description": "Returns the transport list according to transport name or transport type.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/Date"
          },
          {
            "$ref": "#/components/parameters/Accept-Encoding"
          },
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/On-Behalf-Of"
          },
          {
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items to return. The default value is 10."
          },
          {
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "name": "start",
            "description": "Starting position of the query in relation to the complete set of unpaginated items. The default value is 0."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "transportType",
            "description": "Search transports according to this specified transport type, valid values are 'ipport', 'vpn' and 'socks5'."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "transportName",
            "description": "Search transports by name. Support fuzzy search."
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Qtl-Request-Id": {
                "schema": {
                  "type": "string"
                },
                "description": "A string automatically generated by the API server to identify each request."
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    },
                    "content": {
                      "type": "object",
                      "properties": {
                        "count": {
                          "type": "integer",
                          "description": "Total transports"
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/transport.transportData"
                          }
                        }
                      }
                    },
                    "message": {
                      "$ref": "#/components/schemas/response.message"
                    },
                    "code": {
                      "$ref": "#/components/schemas/response.code"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "code": "0",
                      "content": {
                        "data": [
                          {
                            "accessDomain": "www.test1029.com",
                            "accessPort": 80,
                            "cName": "www.test1029.com.506459.shland.com",
                            "status": 1,
                            "targetDomain": "www.test.com",
                            "targetPort": 1029,
                            "transportCode": "www.test.com:1029",
                            "transportId": 506459,
                            "transportName": "www.test.com:1029",
                            "transportType": "ipport"
                          },
                          {
                            "accessDomain": "www.test1042.com",
                            "accessPort": 80,
                            "cName": "www.test1042.com.506460.shland.com",
                            "status": 1,
                            "targetDomain": "www.test.com",
                            "targetPort": 1042,
                            "transportCode": "www.test.com:1042",
                            "transportId": 506460,
                            "transportName": "www.test.com:1042",
                            "transportType": "ipport"
                          }
                        ],
                        "count": 2
                      },
                      "message": "Success",
                      "status": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "MissingDateHeader",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "MissingDateHeader"
                        },
                        "message": {
                          "type": "string",
                          "description": "Authorized request must have a Date header."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "InvalidURI",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "InvalidURI"
                        },
                        "message": {
                          "type": "string",
                          "description": "Could not parse the specified URI."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "MissingAuthHeader",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "MissingAuthHeader"
                        },
                        "message": {
                          "type": "string",
                          "description": "The HTTP authorization header is missing."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "RequestExpired",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "RequestExpired"
                        },
                        "message": {
                          "type": "string",
                          "description": "Request has expired. Timestamp date is xxx."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "InvalidArgument",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "InvalidArgument"
                        },
                        "message": {
                          "type": "string",
                          "description": "There is a problem with a parameter name or value."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    }
                  ],
                  "type": "object"
                },
                "examples": {
                  "MissingDateHeader": {
                    "value": {
                      "code": "MissingDateHeader",
                      "message": "Authorized request must have a Date header.",
                      "status": 1
                    }
                  },
                  "RequestExpired": {
                    "value": {
                      "code": "RequestExpired",
                      "message": "Request has expired. Timestamp date is xxx.",
                      "status": 1
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "AccessDenied"
                    },
                    "message": {
                      "type": "string",
                      "description": "This user is not allowed to perform this request."
                    },
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    }
                  }
                },
                "examples": {
                  "AccessDenied": {
                    "value": {
                      "code": "AccessDenied",
                      "message": "This user is not allowed to perform this request.",
                      "status": 1
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "AccessDenied"
                    },
                    "message": {
                      "type": "string",
                      "description": "This user is not allowed to perform this request."
                    },
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    }
                  }
                },
                "examples": {
                  "AccessDenied": {
                    "value": {
                      "code": "AccessDenied",
                      "message": "This user is not allowed to perform this request.",
                      "status": 1
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "NoSuchTransportType"
                    },
                    "message": {
                      "type": "string",
                      "description": "The specified transport type does not exist."
                    },
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    }
                  }
                },
                "examples": {
                  "NoSuchTransportType": {
                    "value": {
                      "code": "NoSuchTransportType",
                      "message": "The specified transport type does not exist.",
                      "status": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "InternalError"
                    },
                    "message": {
                      "type": "string",
                      "description": "We encountered an internal error. Please try again."
                    },
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    }
                  }
                },
                "examples": {
                  "InternalError": {
                    "value": {
                      "code": "InternalError",
                      "message": "We encountered an internal error. Please try again.",
                      "status": 1
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Transports"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "description": ""
        }
      },
      "post": {
        "summary": "Create a transport",
        "operationId": "post-transport",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    },
                    "message": {
                      "$ref": "#/components/schemas/response.message"
                    },
                    "code": {
                      "$ref": "#/components/schemas/response.code"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "status": 1,
                      "message": "Success",
                      "code": "0"
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              },
              "text/html": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              },
              "application/zip": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              },
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              },
              "text/plain": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              },
              "application/EDIFACT": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "MissingDateHeader",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "MissingDateHeader"
                        },
                        "message": {
                          "type": "string",
                          "description": "Authorized request must have a Date header."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "InvalidURI",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "InvalidURI"
                        },
                        "message": {
                          "type": "string",
                          "description": "Could not parse the specified URI."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "MissingAuthHeader",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "MissingAuthHeader"
                        },
                        "message": {
                          "type": "string",
                          "description": "The HTTP authorization header is missing."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "RequestExpired",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "RequestExpired"
                        },
                        "message": {
                          "type": "string",
                          "description": "Request has expired. Timestamp date is xxx."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "MissingArgument",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "MissingArgument"
                        },
                        "message": {
                          "type": "string",
                          "description": "Required parameter is missing."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "CNameAlreadyExists",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "CNameAlreadyExists"
                        },
                        "message": {
                          "type": "string",
                          "description": "CNAME already exists."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "TargetDomainAndPortAlreadyExist",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "TargetDomainAndPortAlreadyExist"
                        },
                        "message": {
                          "type": "string",
                          "description": "The target domain and target port already exist."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "UserAccountAlreadyExists",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "UserAccountAlreadyExists"
                        },
                        "message": {
                          "type": "string",
                          "description": "User account already exists."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "InvalidCNameSuffix",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "InvalidCNameSuffix"
                        },
                        "message": {
                          "type": "string",
                          "description": "Invalid CName suffix."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "InvalidArgument",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "InvalidArgument"
                        },
                        "message": {
                          "type": "string",
                          "description": "There is a problem with a parameter name or value."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "InvalidUseStandardPort",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "InvalidUseStandardPort"
                        },
                        "message": {
                          "type": "string",
                          "description": "The value of field ‘useStandardPort’ is invalid."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "AccessDomainIsRequired",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "AccessDomainIsRequired"
                        },
                        "message": {
                          "type": "string",
                          "description": "'accessDomain' is required and can’t be empty."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "InvalidAccessDomain",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "InvalidAccessDomain"
                        },
                        "message": {
                          "type": "string",
                          "description": "The value of field ‘accessDomain’ is invalid."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    }
                  ],
                  "type": "object"
                },
                "examples": {
                  "InvalidAccessDomain": {
                    "value": {
                      "code": "InvalidAccessDomain",
                      "message": "The value of field ‘accessDomain’ is invalid.",
                      "status": 1
                    }
                  },
                  "InvalidUseStandardPort": {
                    "value": {
                      "code": "InvalidUseStandardPort",
                      "message": "The value of field ‘useStandardPort’ is invalid.",
                      "status": 1
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "UnAuthorized"
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid authentication / authorization credentials."
                    },
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    }
                  }
                },
                "examples": {
                  "UnAuthorized": {
                    "value": {
                      "code": "UnAuthorized",
                      "message": "Invalid authentication / authorization credentials.",
                      "status": 1
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "AccessDenied",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "AccessDenied"
                        },
                        "message": {
                          "type": "string",
                          "description": "This user is not allowed to perform this request."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "ResourceNoAccess",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "ResourceNoAccess"
                        },
                        "message": {
                          "type": "string",
                          "description": "Read only customer can not modify resources."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    }
                  ],
                  "type": "object"
                },
                "examples": {
                  "AccessDenied": {
                    "value": {
                      "code": "AccessDenied",
                      "message": "This user is not allowed to perform this request.",
                      "status": 1
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "NoSuchTransportType",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "NoSuchTransportType"
                        },
                        "message": {
                          "type": "string",
                          "description": "The specified transport type does not exist."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "DistributeConfigFailed",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "DistributeConfigFailed"
                        },
                        "message": {
                          "type": "string",
                          "description": "HDT system error. Please contact HDT support team."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    }
                  ],
                  "type": "object"
                },
                "examples": {
                  "NoSuchTransportType": {
                    "value": {
                      "code": "NoSuchTransportType",
                      "message": "The specified transport type does not exist.",
                      "status": 1
                    }
                  },
                  "DistributeConfigFailed": {
                    "value": {
                      "code": "DistributeConfigFailed",
                      "message": "HDT system error. Please contact HDT support team.",
                      "status": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "InternalError"
                    },
                    "message": {
                      "type": "string",
                      "description": "We encountered an internal error. Please try again."
                    },
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    }
                  }
                },
                "examples": {
                  "InternalError": {
                    "value": {
                      "code": "InternalError",
                      "message": "We encountered an internal error. Please try again.",
                      "status": 1
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Create a transport and associate it with the calling customer.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/Date"
          },
          {
            "$ref": "#/components/parameters/Accept-Encoding"
          },
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/On-Behalf-Of"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "transportName": {
                    "$ref": "#/components/schemas/transport.name"
                  },
                  "targetDomain": {
                    "$ref": "#/components/schemas/transport.targetDomain"
                  },
                  "targetPort": {
                    "$ref": "#/components/schemas/transport.targetPort"
                  },
                  "accessDomain": {
                    "$ref": "#/components/schemas/transport.accessDomain"
                  },
                  "accessPort": {
                    "$ref": "#/components/schemas/transport.accessPort"
                  },
                  "useStandardPort": {
                    "$ref": "#/components/schemas/transport.useStandardPort"
                  },
                  "cName": {
                    "$ref": "#/components/schemas/transport.cName"
                  },
                  "verifyPsb": {
                    "$ref": "#/components/schemas/transport.verifyPsb"
                  },
                  "transportType": {
                    "$ref": "#/components/schemas/transport.type"
                  },
                  "ipVersion": {
                    "$ref": "#/components/schemas/transport.ipVersion"
                  },
                  "userAccount": {
                    "$ref": "#/components/schemas/transport.userAccount"
                  },
                  "userPwd": {
                    "$ref": "#/components/schemas/transport.userPwd"
                  }
                },
                "required": [
                  "targetDomain",
                  "targetPort",
                  "accessDomain",
                  "accessPort",
                  "useStandardPort",
                  "transportType"
                ]
              },
              "examples": {
                "Create IP-Port transport": {
                  "value": {
                    "transportName": "string",
                    "targetDomain": "example.target.com",
                    "targetPort": 80,
                    "accessDomain": "example.access.com",
                    "accessPort": 80,
                    "useStandardPort": "http",
                    "cName": "example.com",
                    "verifyPsb": 0,
                    "transportType": "ipport",
                    "ipVersion": 1
                  }
                }
              }
            }
          },
          "description": "Create a transport."
        },
        "tags": [
          "Transports"
        ]
      }
    },
    "/transport/{transport-id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "transport-id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Query a transport",
        "tags": [
          "Transports"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    },
                    "message": {
                      "$ref": "#/components/schemas/response.message"
                    },
                    "code": {
                      "$ref": "#/components/schemas/response.code"
                    },
                    "content": {
                      "$ref": "#/components/schemas/transport.transportData"
                    }
                  }
                },
                "examples": {
                  "Ipport with empty useStandardPort": {
                    "value": {
                      "code": "0",
                      "content": {
                        "transportId": 1,
                        "transportCode": "test.domain.com:18888",
                        "transportType": "ipport",
                        "transportName": "test.domain.com:18888",
                        "targetDomain": "test.domain.com",
                        "targetPort": 18888,
                        "useFtp": 0,
                        "cName": "access.domain.com",
                        "accessPort": 19999,
                        "useUdp": 0,
                        "useStandardPort": "",
                        "accessDomain": "test.domain.com",
                        "status": 1,
                        "speedLimit": 0,
                        "concurrentLimit": 0,
                        "transportStrategy": "topspeed",
                        "ipWhiteList": "192.168.1.0/26;192.168.10.1-192.168.10.100",
                        "carryClientIp": 0,
                        "comments": ""
                      },
                      "message": "Success",
                      "status": 1
                    }
                  },
                  "Ipport with non-empty useStandardPort": {
                    "value": {
                      "code": "0",
                      "content": {
                        "transportId": 3,
                        "transportCode": "test-2.domain.com:1080",
                        "transportType": "ipport",
                        "transportName": "test-2.domain.com:1080",
                        "targetDomain": "test-2.domain.com",
                        "targetPort": 1080,
                        "useFtp": 0,
                        "cName": "access.cname.com",
                        "accessPort": 80,
                        "useUdp": 0,
                        "useStandardPort": "http",
                        "accessDomain": "access.domain.com,access1.domain.com",
                        "status": 1,
                        "speedLimit": 0,
                        "concurrentLimit": 0,
                        "transportStrategy": "topspeed",
                        "ipWhiteList": "192.168.1.0/26;192.168.10.1-192.168.10.100",
                        "comments": ""
                      },
                      "message": "Success",
                      "status": 1
                    }
                  },
                  "vpn or socks5": {
                    "value": {
                      "code": "0",
                      "content": {
                        "transportId": 2,
                        "transportCode": "user1",
                        "transportType": "vpn",
                        "transportName": "user1",
                        "useFtp": 0,
                        "cName": "access.domain.com",
                        "userAccount": "user1",
                        "userPwd": "123456",
                        "status": 1,
                        "speedLimit": 0,
                        "concurrentLimit": 0,
                        "transportStrategy": "topspeed",
                        "ipWhiteList": "192.168.1.0/26;192.168.10.1-100",
                        "comments": ""
                      },
                      "message": "Success",
                      "status": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "MissingDateHeader",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "MissingDateHeader"
                        },
                        "message": {
                          "type": "string",
                          "description": "Authorized request must have a Date header."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "InvalidURI",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "InvalidURI"
                        },
                        "message": {
                          "type": "string",
                          "description": "Could not parse the specified URI."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "MissingAuthHeader",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "MissingAuthHeader"
                        },
                        "message": {
                          "type": "string",
                          "description": "The HTTP authorization header is missing."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "RequestExpired",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "RequestExpired"
                        },
                        "message": {
                          "type": "string",
                          "description": "Request has expired. Timestamp date is xxx."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    }
                  ],
                  "type": "object"
                },
                "examples": {
                  "MissingDateHeader": {
                    "value": {
                      "code": "MissingDateHeader",
                      "message": "Authorized request must have a Date header.",
                      "status": 1
                    }
                  },
                  "RequestExpired": {
                    "value": {
                      "code": "RequestExpired",
                      "message": "Request has expired. Timestamp date is xxx.",
                      "status": 1
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "UnAuthorized"
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid authentication / authorization credentials."
                    },
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    }
                  }
                },
                "examples": {
                  "Unauthorized": {
                    "value": {
                      "code": "Unauthorized",
                      "message": "Invalid authentication / authorization credentials.",
                      "status": 1
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "AccessDenied"
                    },
                    "message": {
                      "type": "string",
                      "description": "This user is not allowed to perform this request."
                    },
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    }
                  }
                },
                "examples": {
                  "AccessDenied": {
                    "value": {
                      "code": "AccessDenied",
                      "message": "This user is not allowed to perform this request.",
                      "status": 1
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "NoSuchTransportType"
                    },
                    "message": {
                      "type": "string",
                      "description": "The specified transport type does not exist."
                    },
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    }
                  }
                },
                "examples": {
                  "NoSuchTransportType": {
                    "value": {
                      "code": "NoSuchTransportType",
                      "message": "The specified transport type does not exist.",
                      "status": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "InternalError"
                    },
                    "message": {
                      "type": "string",
                      "description": "We encountered an internal error. Please try again."
                    },
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    }
                  }
                },
                "examples": {
                  "InternalError": {
                    "value": {
                      "code": "InternalError",
                      "message": "We encountered an internal error. Please try again.",
                      "status": 1
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-transport-transportId",
        "description": "Returns the information of a transport by transport-Id.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/Date"
          },
          {
            "$ref": "#/components/parameters/Accept-Encoding"
          },
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/On-Behalf-Of"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ]
      },
      "put": {
        "summary": "Modify a transport",
        "operationId": "put-transport-transportId",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    },
                    "message": {
                      "$ref": "#/components/schemas/response.message"
                    },
                    "code": {
                      "$ref": "#/components/schemas/response.code"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "status": 1,
                      "message": "Success",
                      "code": "0"
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              },
              "text/html": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              },
              "application/zip": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              },
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              },
              "text/plain": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              },
              "application/EDIFACT": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "MissingDateHeader",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "MissingDateHeader"
                        },
                        "message": {
                          "type": "string",
                          "description": "Authorized request must have a Date header."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "InvalidURI",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "InvalidURI"
                        },
                        "message": {
                          "type": "string",
                          "description": "Could not parse the specified URI."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "InvalidDatePeriod",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "InvalidDatePeriod"
                        },
                        "message": {
                          "type": "string",
                          "description": "The date specified is invalid."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "MissingAuthHeader",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "MissingAuthHeader"
                        },
                        "message": {
                          "type": "string",
                          "description": "The HTTP authorization header is missing."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "RequestExpired",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "RequestExpired"
                        },
                        "message": {
                          "type": "string",
                          "description": "Request has expired. Timestamp date is xxx."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "MissingArgument",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "MissingArgument"
                        },
                        "message": {
                          "type": "string",
                          "description": "Required parameter is missing."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "InvalidArgument",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "InvalidArgument"
                        },
                        "message": {
                          "type": "string",
                          "description": "There is a problem with a parameter name or value."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    }
                  ],
                  "type": "object"
                },
                "examples": {
                  "InvalidURI": {
                    "value": {
                      "code": "InvalidURI",
                      "message": "Could not parse the specified URI.",
                      "status": 1
                    }
                  },
                  "MissingAuthHeader": {
                    "value": {
                      "code": "MissingAuthHeader",
                      "message": "The HTTP authorization header is missing.",
                      "status": 1
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "UnAuthorized"
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid authentication / authorization credentials."
                    },
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    }
                  }
                },
                "examples": {
                  "UnAuthorized": {
                    "value": {
                      "code": "UnAuthorized",
                      "message": "Invalid authentication / authorization credentials.",
                      "status": 1
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "AccessDenied",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "AccessDenied"
                        },
                        "message": {
                          "type": "string",
                          "description": "This user is not allowed to perform this request."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "ResourceNoAccess",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "ResourceNoAccess"
                        },
                        "message": {
                          "type": "string",
                          "description": "Read only customer can not modify resources."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    }
                  ],
                  "type": "object"
                },
                "examples": {
                  "AccessDenied": {
                    "value": {
                      "code": "AccessDenied",
                      "message": "This user is not allowed to perform this request.",
                      "status": 1
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "NoSuchTransportId",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "NoSuchTransportId"
                        },
                        "message": {
                          "type": "string",
                          "description": "The specified transport id does not exist."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "DistributeConfigFailed",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "DistributeConfigFailed"
                        },
                        "message": {
                          "type": "string",
                          "description": "HDT system error. Please contact HDT support team."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    }
                  ],
                  "type": "object"
                },
                "examples": {
                  "NoSuchTransportId": {
                    "value": {
                      "code": "NoSuchTransportId",
                      "message": "The specified transport id does not exist.",
                      "status": 1
                    }
                  },
                  "DistributeConfigFailed": {
                    "value": {
                      "code": "DistributeConfigFailed",
                      "message": "HDT system error. Please contact HDT support team.",
                      "status": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "InternalError"
                    },
                    "message": {
                      "type": "string",
                      "description": "We encountered an internal error. Please try again."
                    },
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    }
                  }
                },
                "examples": {
                  "InternalError": {
                    "value": {
                      "code": "InternalError",
                      "message": "We encountered an internal error. Please try again.",
                      "status": 1
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Modify a transport according to transport ID. If the transport type is \"ipport\", then \"targetDomain\", \"targetPort\", \"transportName\", \"useFtp\", \"useUdp\", \"useStandardPort\", \"accessDomain\", \"status\", \"comments\", and \"ipWhiteList\" can be modified. If transport type of this transport is \"vpn\" or \"socks5\", then \"transportName\", \"useFtp\", \"userPwd\", \"status\", \"comments\", and \"ipWhiteList\" can be modified.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/Date"
          },
          {
            "$ref": "#/components/parameters/Accept-Encoding"
          },
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/On-Behalf-Of"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "transportType": {
                    "$ref": "#/components/schemas/transport.type"
                  },
                  "transportName": {
                    "$ref": "#/components/schemas/transport.name"
                  },
                  "targetDomain": {
                    "$ref": "#/components/schemas/transport.targetDomain"
                  },
                  "targetPort": {
                    "$ref": "#/components/schemas/transport.targetPort"
                  },
                  "useFtp": {
                    "$ref": "#/components/schemas/transport.useFtp"
                  },
                  "cName    ": {
                    "$ref": "#/components/schemas/transport.cName"
                  },
                  "userAccount": {
                    "$ref": "#/components/schemas/transport.userAccount"
                  },
                  "userPwd": {
                    "$ref": "#/components/schemas/transport.userPwd"
                  },
                  "accessDomain": {
                    "$ref": "#/components/schemas/transport.accessDomain"
                  },
                  "useStandardPort": {
                    "$ref": "#/components/schemas/transport.useStandardPort"
                  },
                  "ipWhiteList": {
                    "$ref": "#/components/schemas/transport.ipWhiteList"
                  },
                  "useUdp": {
                    "$ref": "#/components/schemas/transport.useUdp"
                  },
                  "status": {
                    "$ref": "#/components/schemas/transport.status"
                  },
                  "comments": {
                    "$ref": "#/components/schemas/transport.comments"
                  }
                }
              },
              "examples": {
                "Ipport with empty useStandardPort": {
                  "value": {
                    "transportId": 1,
                    "transportCode": "test.domain.com:18888",
                    "transportType": "ipport",
                    "transportName": "test.domain.com:18888",
                    "targetDomain": "test.domain.com",
                    "targetPort": 18888,
                    "useFtp": 0,
                    "cName": "access.domain.com",
                    "accessPort": 19999,
                    "useUdp": 0,
                    "useStandardPort": "",
                    "accessDomain": "test.domain.com",
                    "status": 1,
                    "ipWhiteList": "192.168.1.0/26;192.168.10.1-192.168.10.100",
                    "comments": ""
                  }
                },
                "Ipport with non-empty useStandardPort": {
                  "value": {
                    "transportId": 3,
                    "transportCode": "test-2.domain.com:80",
                    "transportType": "ipport",
                    "transportName": "test-2.domain.com:80",
                    "targetDomain": "test-2.domain.com",
                    "targetPort": 80,
                    "useFtp": 0,
                    "cName": "access.cname.com",
                    "accessPort": 80,
                    "useUdp": 0,
                    "useStandardPort": "http",
                    "accessDomain": "access.domain.com",
                    "status": 1,
                    "speedLimit": 0,
                    "concurrentLimit": 0,
                    "transportStrategy": "topspeed",
                    "ipWhiteList": "192.168.1.0/26;192.168.10.1-192.168.10.100",
                    "comments": ""
                  }
                },
                "vpn or socks5": {
                  "value": {
                    "transportId": 2,
                    "transportCode": "user1",
                    "transportType": "vpn",
                    "transportName": "user1",
                    "useFtp": 0,
                    "cName": "access.domain.com",
                    "userAccount": "user1",
                    "userPwd": "123456",
                    "status": 1,
                    "ipWhiteList": "192.168.10/26;192.168.10.1-100",
                    "comments": " "
                  }
                }
              }
            }
          },
          "description": "Modify a transport."
        },
        "tags": [
          "Transports"
        ]
      },
      "delete": {
        "summary": "Delete a transport",
        "operationId": "delete-transport-transportId",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    },
                    "message": {
                      "$ref": "#/components/schemas/response.message"
                    },
                    "code": {
                      "$ref": "#/components/schemas/response.code"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "status": 1,
                      "message": "Success",
                      "code": "0"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "MissingDateHeader",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "MissingDateHeader"
                        },
                        "message": {
                          "type": "string",
                          "description": "Authorized request must have a Date header."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "InvalidURI",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "InvalidURI"
                        },
                        "message": {
                          "type": "string",
                          "description": "Could not parse the specified URI."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "MissingAuthHeader",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "MissingAuthHeader"
                        },
                        "message": {
                          "type": "string",
                          "description": "The HTTP authorization header is missing."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "RequestExpired",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "RequestExpired"
                        },
                        "message": {
                          "type": "string",
                          "description": "Request has expired. Timestamp date is xxx."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    }
                  ],
                  "type": "object"
                },
                "examples": {
                  "MissingDateHeader": {
                    "value": {
                      "code": "MissingDateHeader",
                      "message": "Authorized request must have a Date header.",
                      "status": 1
                    }
                  },
                  "RequestExpired": {
                    "value": {
                      "code": "RequestExpired",
                      "message": "Request has expired. Timestamp date is xxx.",
                      "status": 1
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid authentication / authorization credentials."
                    },
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    }
                  }
                },
                "examples": {
                  "AccessDenied": {
                    "value": {
                      "code": "Unauthorized",
                      "message": "Invalid authentication / authorization credentials.",
                      "status": 1
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "AccessDenied",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "AccessDenied"
                        },
                        "message": {
                          "type": "string",
                          "description": "This user is not allowed to perform this request."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "ResourceNoAccess",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "ResourceNoAccess"
                        },
                        "message": {
                          "type": "string",
                          "description": "Read only customer can not modify resources."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    }
                  ],
                  "type": "object"
                },
                "examples": {
                  "AccessDenied": {
                    "value": {
                      "code": "AccessDenied",
                      "message": "This user is not allowed to perform this request.",
                      "status": 1
                    }
                  },
                  "ResourceNoAccess": {
                    "value": {
                      "code": "ResourceNoAccess",
                      "message": "Read only customer can not modify resources.",
                      "status": 1
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "NoSuchTransportId",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "NoSuchTransportId"
                        },
                        "message": {
                          "type": "string",
                          "description": "The specified transport id  does not exist."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "DistributeConfigFailed",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "DistributeConfigFailed"
                        },
                        "message": {
                          "type": "string",
                          "description": "HDT system error. Please contact HDT support team."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    }
                  ],
                  "type": "object"
                },
                "examples": {
                  "NoSuchTransportId": {
                    "value": {
                      "code": "NoSuchTransportId",
                      "message": "The specified transport id  does not exist.",
                      "status": 1
                    }
                  },
                  "DistributeConfigFailed": {
                    "value": {
                      "code": "DistributeConfigFailed",
                      "message": "HDT system error. Please contact HDT support team.",
                      "status": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "InternalError"
                    },
                    "message": {
                      "type": "string",
                      "description": "We encountered an internal error. Please try again."
                    },
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    }
                  }
                },
                "examples": {
                  "InternalError": {
                    "value": {
                      "code": "InternalError",
                      "message": "We encountered an internal error. Please try again.",
                      "status": 1
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Delete a transport by the transport ID.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/Date"
          },
          {
            "$ref": "#/components/parameters/Accept-Encoding"
          },
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/On-Behalf-Of"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "tags": [
          "Transports"
        ]
      }
    },
    "/transport/{transport-id}/history": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "transport-id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Query history of a transport",
        "tags": [
          "Transports"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    },
                    "message": {
                      "$ref": "#/components/schemas/response.message"
                    },
                    "code": {
                      "$ref": "#/components/schemas/transport.code"
                    },
                    "content": {
                      "type": "object",
                      "properties": {
                        "count": {
                          "type": "integer"
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "deployId": {
                                "$ref": "#/components/schemas/transport.deployId"
                              },
                              "deployDt": {
                                "type": "integer"
                              },
                              "transportCode": {
                                "$ref": "#/components/schemas/transport.code"
                              },
                              "transportType": {
                                "$ref": "#/components/schemas/transport.type"
                              },
                              "transportName": {
                                "$ref": "#/components/schemas/transport.name"
                              },
                              "targetDomain": {
                                "$ref": "#/components/schemas/transport.targetDomain"
                              },
                              "targetPort": {
                                "$ref": "#/components/schemas/transport.targetPort"
                              },
                              "useFtp": {
                                "$ref": "#/components/schemas/transport.useFtp"
                              },
                              "cName": {
                                "$ref": "#/components/schemas/transport.cName"
                              },
                              "accessPort": {
                                "$ref": "#/components/schemas/transport.accessPort"
                              },
                              "userAccount": {
                                "$ref": "#/components/schemas/transport.userAccount"
                              },
                              "userPwd": {
                                "$ref": "#/components/schemas/transport.userPwd"
                              },
                              "useUdp": {
                                "$ref": "#/components/schemas/transport.useUdp"
                              },
                              "useStandardPort": {
                                "$ref": "#/components/schemas/transport.useStandardPort"
                              },
                              "accessDomain": {
                                "$ref": "#/components/schemas/transport.accessDomain"
                              },
                              "speedLimit": {
                                "$ref": "#/components/schemas/transport.speedLimit"
                              },
                              "concurrentLimit": {
                                "$ref": "#/components/schemas/transport.concurrentLimit"
                              },
                              "transportStrategy": {
                                "$ref": "#/components/schemas/transport.strategy"
                              },
                              "ipWhiteList": {
                                "$ref": "#/components/schemas/transport.ipWhiteList"
                              },
                              "verifyIcp": {
                                "$ref": "#/components/schemas/transport.verifyIcp"
                              },
                              "verifyPsb": {
                                "$ref": "#/components/schemas/transport.verifyPsb"
                              },
                              "vip": {
                                "$ref": "#/components/schemas/transport.vip"
                              },
                              "ipVersion": {
                                "$ref": "#/components/schemas/transport.ipVersion"
                              },
                              "exitIp": {
                                "$ref": "#/components/schemas/transport.exitIp"
                              },
                              "carryClientIp": {
                                "$ref": "#/components/schemas/transport.carryClientIp"
                              },
                              "comments": {
                                "$ref": "#/components/schemas/transport.comments"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Ipport": {
                    "value": {
                      "code": "0",
                      "content": {
                        "data": [
                          {
                            "deployId": 1,
                            "accessDomain": "0202-1.access.com",
                            "accessPort": 80,
                            "apiRequestId": "8UqsuWcV",
                            "cName": "0202-1.access.com.506561.shland.com",
                            "carryClientIp": 0,
                            "concurrentLimit": 0,
                            "deployDt": 1612254378000,
                            "ipBlackList": "",
                            "ipVersion": 1,
                            "ipWhiteList": "",
                            "speedLimit": 0,
                            "targetDomain": "0202-1.target.com",
                            "targetPort": 80,
                            "transportCode": "0202-1.target.com:80",
                            "transportId": 506561,
                            "transportName": "0202-1.target.com:80",
                            "transportStatus": 1,
                            "transportStrategy": "topspeed",
                            "transportStrategyNam": "Default",
                            "useFtp": 0,
                            "useStandardPort": "http",
                            "useUdp": 0,
                            "verifyIcp": 0,
                            "verifyPsb": 0
                          }
                        ],
                        "count": 1
                      },
                      "message": "Success",
                      "status": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "MissingDateHeader",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "MissingDateHeader"
                        },
                        "message": {
                          "type": "string",
                          "description": "Authorized request must have a Date header."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "InvalidURI",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "InvalidURI"
                        },
                        "message": {
                          "type": "string",
                          "description": "Could not parse the specified URI."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "MissingAuthHeader",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "MissingAuthHeader"
                        },
                        "message": {
                          "type": "string",
                          "description": "The HTTP authorization header is missing."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "RequestExpired",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "RequestExpired"
                        },
                        "message": {
                          "type": "string",
                          "description": "Request has expired. Timestamp date is xxx."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    }
                  ],
                  "type": "object"
                },
                "examples": {
                  "MissingDateHeader": {
                    "value": {
                      "code": "MissingDateHeader",
                      "message": "Authorized request must have a Date header.",
                      "status": 1
                    }
                  },
                  "RequestExpired": {
                    "value": {
                      "code": "RequestExpired",
                      "message": "Request has expired. Timestamp date is xxx.",
                      "status": 1
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "description": "This user is not allowed to perform this request."
                    },
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    }
                  }
                },
                "examples": {
                  "Unauthorized": {
                    "value": {
                      "code": "Unauthorized",
                      "message": "This user is not allowed to perform this request.",
                      "status": 1
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "AccessDenied"
                    },
                    "message": {
                      "type": "string",
                      "description": "This user is not allowed to perform this request."
                    },
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    }
                  }
                },
                "examples": {
                  "AccessDenied": {
                    "value": {
                      "code": "AccessDenied",
                      "message": "This user is not allowed to perform this request.",
                      "status": 1
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "NoSuchTransportId"
                    },
                    "message": {
                      "type": "string",
                      "description": "The specified transport Id does not exist."
                    },
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    }
                  }
                },
                "examples": {
                  "NoSuchTransportId": {
                    "value": {
                      "code": "NoSuchTransportId",
                      "message": "The specified transport id does not exist.",
                      "status": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "InternalError"
                    },
                    "message": {
                      "type": "string",
                      "description": "We encountered an internal error. Please try again."
                    },
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    }
                  }
                },
                "examples": {
                  "InternalError": {
                    "value": {
                      "code": "InternalError",
                      "message": "We encountered an internal error. Please try again.",
                      "status": 1
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-transport-history-by-transportId",
        "description": "Returns a transport’s history configuration information.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/Date"
          },
          {
            "$ref": "#/components/parameters/Accept-Encoding"
          },
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/On-Behalf-Of"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items to return. The default value is 10."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "start",
            "description": "Starting position of the query in relation to the complete set of unpaginated items. The default value is 0."
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ]
      }
    },
    "/report/flow": {
      "get": {
        "summary": "Query flow report",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Qtl-Request-Id": {
                "schema": {
                  "type": "string"
                },
                "description": "A string automatically generated by the API server to identify each request."
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    },
                    "message": {
                      "$ref": "#/components/schemas/response.message"
                    },
                    "content": {
                      "$ref": "#/components/schemas/report.flowReport"
                    },
                    "code": {
                      "$ref": "#/components/schemas/response.code"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "code": "0",
                      "content": {
                        "records-count": 24,
                        "download-summary": 18519850119,
                        "flow-data": [
                          {
                            "download": 242202979,
                            "upload": 41775682,
                            "timestamp": "2021-02-01T00:00:00"
                          },
                          {
                            "download": 434976489,
                            "upload": 53327750,
                            "timestamp": "2021-02-01T01:00:00"
                          },
                          {
                            "download": 262619320,
                            "upload": 46792105,
                            "timestamp": "2021-02-01T02:00:00"
                          },
                          {
                            "download": 271591374,
                            "upload": 40887864,
                            "timestamp": "2021-02-01T03:00:00"
                          },
                          {
                            "download": 191100146,
                            "upload": 37105263,
                            "timestamp": "2021-02-01T04:00:00"
                          },
                          {
                            "download": 276380284,
                            "upload": 43468523,
                            "timestamp": "2021-02-01T05:00:00"
                          },
                          {
                            "download": 312642389,
                            "upload": 40554045,
                            "timestamp": "2021-02-01T06:00:00"
                          },
                          {
                            "download": 371711566,
                            "upload": 42653678,
                            "timestamp": "2021-02-01T07:00:00"
                          },
                          {
                            "download": 206700554,
                            "upload": 34305845,
                            "timestamp": "2021-02-01T08:00:00"
                          },
                          {
                            "download": 236087512,
                            "upload": 42197590,
                            "timestamp": "2021-02-01T09:00:00"
                          },
                          {
                            "download": 281101998,
                            "upload": 51045937,
                            "timestamp": "2021-02-01T10:00:00"
                          },
                          {
                            "download": 345577080,
                            "upload": 68093439,
                            "timestamp": "2021-02-01T11:00:00"
                          },
                          {
                            "download": 294388314,
                            "upload": 55829406,
                            "timestamp": "2021-02-01T12:00:00"
                          },
                          {
                            "download": 510627818,
                            "upload": 67908071,
                            "timestamp": "2021-02-01T13:00:00"
                          },
                          {
                            "download": 1160562771,
                            "upload": 145654807,
                            "timestamp": "2021-02-01T14:00:00"
                          },
                          {
                            "download": 1877963150,
                            "upload": 204881040,
                            "timestamp": "2021-02-01T15:00:00"
                          },
                          {
                            "download": 1720644941,
                            "upload": 234140548,
                            "timestamp": "2021-02-01T16:00:00"
                          },
                          {
                            "download": 1368231195,
                            "upload": 243603839,
                            "timestamp": "2021-02-01T17:00:00"
                          },
                          {
                            "download": 1333455796,
                            "upload": 262665569,
                            "timestamp": "2021-02-01T18:00:00"
                          },
                          {
                            "download": 1153213974,
                            "upload": 264971687,
                            "timestamp": "2021-02-01T19:00:00"
                          },
                          {
                            "download": 1785975896,
                            "upload": 235060258,
                            "timestamp": "2021-02-01T20:00:00"
                          },
                          {
                            "download": 1520091740,
                            "upload": 294514865,
                            "timestamp": "2021-02-01T21:00:00"
                          },
                          {
                            "download": 1197156838,
                            "upload": 262305327,
                            "timestamp": "2021-02-01T22:00:00"
                          },
                          {
                            "download": 1164845995,
                            "upload": 252102680,
                            "timestamp": "2021-02-01T23:00:00"
                          }
                        ],
                        "upload-summary": 3065845818
                      },
                      "message": "Success",
                      "status": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Qtl-Request-Id": {
                "description": "A string automatically generated by the API server to identify each request.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "MissingDateHeader",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "MissingDateHeader"
                        },
                        "message": {
                          "type": "string",
                          "description": "Authorized request must have a Date header."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "InvalidURI",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "InvalidURI"
                        },
                        "message": {
                          "type": "string",
                          "description": "Could not parse the specified URI."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "InvalidDatePeriod",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "InvalidDatePeriod"
                        },
                        "message": {
                          "type": "string",
                          "description": "The date specified is invalid."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "MissingAuthHeader",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "MissingAuthHeader"
                        },
                        "message": {
                          "type": "string",
                          "description": "The HTTP authorization header is missing."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "RequestExpired",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "RequestExpired"
                        },
                        "message": {
                          "type": "string",
                          "description": "Request has expired. Timestamp date is xxx."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "MissingArgument",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "MissingArgument"
                        },
                        "message": {
                          "type": "string",
                          "description": "Required parameter is missing."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "TimeRangeTooLarge",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "TimeRangeTooLarge"
                        },
                        "message": {
                          "type": "string",
                          "description": "The date range should be no more than 7 days when querying 1 minute intervals.\nThe date range should be no more than one month when querying 5 minute intervals.\nThe date range should be no more than one year when querying hourly, daily, or monthly intervals."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "InvalidArgument",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "InvalidArgument"
                        },
                        "message": {
                          "type": "string",
                          "description": "There is a problem with a parameter name or value."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    }
                  ],
                  "type": "object"
                },
                "examples": {
                  "MissingDateHeader": {
                    "value": {
                      "code": "MissingDateHeader",
                      "message": "Authorized request must have a Date header.",
                      "status": 1
                    }
                  },
                  "RequestExpired": {
                    "value": {
                      "code": "RequestExpired",
                      "message": "Request has expired. Timestamp date is xxx.",
                      "status": 1
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "description": "This user is not allowed to perform this request."
                    },
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    }
                  }
                },
                "examples": {
                  "Unauthorized": {
                    "value": {
                      "code": "Unauthorized",
                      "message": "This user is not allowed to perform this request.",
                      "status": 1
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "AccessDenied"
                    },
                    "message": {
                      "type": "string",
                      "description": "This user is not allowed to perform this request."
                    },
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    }
                  }
                },
                "examples": {
                  "AccessDenied": {
                    "value": {
                      "code": "AccessDenied",
                      "message": "This user is not allowed to perform this request.",
                      "status": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Qtl-Request-Id": {
                "schema": {
                  "type": "string"
                },
                "description": "A string automatically generated by the API server to identify each request."
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "$ref": "#/components/schemas/response.code"
                    },
                    "message": {
                      "$ref": "#/components/schemas/response.message"
                    },
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    }
                  }
                },
                "examples": {
                  "InternalError": {
                    "value": {
                      "code": "InternalError",
                      "message": "We encountered an internal error. Please try again.",
                      "status": 1
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-report-flow",
        "description": "Returns the total traffic volume in bytes for all of the transports. Parameters allow you to specify a time period and an interval type.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/Date"
          },
          {
            "$ref": "#/components/parameters/Accept-Encoding"
          },
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/On-Behalf-Of"
          },
          {
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "in": "query",
            "name": "datefrom",
            "description": "RFC3339 formatted date indicating the starting date . Example:  2013-01-01T22:30:00+08:00",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "in": "query",
            "name": "dateto",
            "description": "RFC3339 formatted date indicating the ending date . Example:  2013-01-01T22:30:00+08:00.\nIf the time range of datefrom and dateto is more than 366 days, it will return 'TimeRangeTooLarge' error.\n",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "interval",
            "description": "Granularity of time. Can be \"oneminute\", \"fiveminutes\", \"hourly\", \"daily\", or \"monthly\".\nIf the time range is no more than one day, the default value is \"oneminute\";\nIf the time range is more than one day but less than or equal to one week, the default value is \"fiveminutes\";\nIf the time range is more than one week but less than or equal to one month, the default value is \"hourly\";\nIf the time range is more than one month, the default value is \"daily\"; \nRestriction:\n1.\tOne minute - Maximum time range is 7 days\n2.\t5 minutes - Maximum time range is 1 month(31d)\n3.\tHourly, Daily, Monthly - Maximum time range is 1 year(366d)"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "timezone",
            "description": "Timezone for the report data. It must be relative to UTC and specified in the format UTC+n where -12<= n <= 12.  For example, timezone=UTC-7 and timezone=UTC+8.  If the parameter is unspecified, the results will be in the UTC timezone. The default timezone is UTC+00."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "An access domain or a list of access domains separated by comma.",
            "name": "accessDomain"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "transport",
            "description": "A transport id or a list of transport ids separated by comma"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ]
      }
    },
    "/report/requests": {
      "get": {
        "summary": "Query requests report",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Qtl-Request-Id": {
                "schema": {
                  "type": "string"
                },
                "description": "A string automatically generated by the API server to identify each request."
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    },
                    "message": {
                      "$ref": "#/components/schemas/response.message"
                    },
                    "content": {
                      "$ref": "#/components/schemas/report.requestsReport"
                    },
                    "code": {
                      "$ref": "#/components/schemas/response.code"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "code": "0",
                      "content": {
                        "records-count": 2,
                        "requests-data": [
                          {
                            "total": 971421,
                            "success": 971420,
                            "timestamp": "2021-02-01T00:00:00"
                          },
                          {
                            "total": 1002640,
                            "success": 1002609,
                            "timestamp": "2021-02-02T00:00:00"
                          }
                        ],
                        "success-summary": 1974029,
                        "total-summary": 1974061
                      },
                      "message": "Success",
                      "status": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "MissingDateHeader",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "MissingDateHeader"
                        },
                        "message": {
                          "type": "string",
                          "description": "Authorized request must have a Date header."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "InvalidURI",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "InvalidURI"
                        },
                        "message": {
                          "type": "string",
                          "description": "Could not parse the specified URI."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "InvalidDatePeriod",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "InvalidDatePeriod"
                        },
                        "message": {
                          "type": "string",
                          "description": "The date specified is invalid."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "MissingAuthHeader",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "MissingAuthHeader"
                        },
                        "message": {
                          "type": "string",
                          "description": "The HTTP authorization header is missing."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "RequestExpired",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "RequestExpired"
                        },
                        "message": {
                          "type": "string",
                          "description": "Request has expired. Timestamp date is xxx."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "MissingArgument",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "MissingArgument"
                        },
                        "message": {
                          "type": "string",
                          "description": "Required parameter is missing."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "TimeRangeTooLarge",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "TimeRangeTooLarge"
                        },
                        "message": {
                          "type": "string",
                          "description": "The date range should be no more than 7 days when querying 1 minute intervals.\nThe date range should be no more than one month when querying 5 minute intervals.\nThe date range should be no more than one year when querying hourly, daily, or monthly intervals."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    },
                    {
                      "title": "InvalidArgument",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "InvalidArgument"
                        },
                        "message": {
                          "type": "string",
                          "description": "There is a problem with a parameter name or value."
                        },
                        "status": {
                          "$ref": "#/components/schemas/response.status"
                        }
                      }
                    }
                  ],
                  "type": "object"
                },
                "examples": {
                  "MissingDateHeader": {
                    "value": {
                      "code": "MissingDateHeader",
                      "message": "Authorized request must have a Date header.",
                      "status": 1
                    }
                  },
                  "RequestExpired": {
                    "value": {
                      "code": "RequestExpired",
                      "message": "Request has expired. Timestamp date is xxx.",
                      "status": 1
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "description": "This user is not allowed to perform this request."
                    },
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    }
                  }
                },
                "examples": {
                  "Unauthorized": {
                    "value": {
                      "code": "Unauthorized",
                      "message": "This user is not allowed to perform this request.",
                      "status": 1
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "AccessDenied"
                    },
                    "message": {
                      "type": "string",
                      "description": "This user is not allowed to perform this request."
                    },
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    }
                  }
                },
                "examples": {
                  "AccessDenied": {
                    "value": {
                      "code": "AccessDenied",
                      "message": "This user is not allowed to perform this request.",
                      "status": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Qtl-Request-Id": {
                "$ref": "#/components/parameters/Qtl-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "InternalError"
                    },
                    "message": {
                      "type": "string",
                      "description": "We encountered an internal error. Please try again."
                    },
                    "status": {
                      "$ref": "#/components/schemas/response.status"
                    }
                  }
                },
                "examples": {
                  "InternalError": {
                    "value": {
                      "code": "InternalError",
                      "message": "We encountered an internal error. Please try again.",
                      "status": 1
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-report-requests",
        "description": "The API is to query the total request count for all of customer’s transports.  Parameters allow you to specify a time period, an interval type.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/Date"
          },
          {
            "$ref": "#/components/parameters/Accept-Encoding"
          },
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/On-Behalf-Of"
          },
          {
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "in": "query",
            "name": "datefrom",
            "description": "RFC3339 formatted date indicating the starting date . Example:  2013-01-01T22:30:00+08:00",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "in": "query",
            "name": "dateto",
            "description": "RFC3339 formatted date indicating the ending date . Example:  2013-01-01T22:30:00+08:00.\nIf the time range of datefrom and dateto is more than 366 days, it will return 'TimeRangeTooLarge' error.\n",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "interval",
            "description": "Granularity of time. Can be \"oneminute\", \"fiveminutes\", \"hourly\", \"daily\", or \"monthly\".\nIf the time range is no more than one day, the default value is \"oneminute\";\nIf the time range is more than one day but less than or equal to one week, the default value is \"fiveminutes\";\nIf the time range is more than one week but less than or equal to one month, the default value is \"hourly\";\nIf the time range is more than one month, the default value is \"daily\"; \nRestriction:\n1.\tOne minute - Maximum time range is 7 days\n2.\t5 minutes - Maximum time range is 1 month(31d)\n3.\tHourly, Daily, Monthly - Maximum time range is 1 year(366d)"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "timezone",
            "description": "Timezone for the report data. It must be relative to UTC and specified in the format UTC+n where -12<= n <= 12.  For example, timezone=UTC-7 and timezone=UTC+8.  If the parameter is unspecified, the results will be in the UTC timezone. The default timezone is UTC+00."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "accessDomain",
            "description": "An access domain or a list of access domains separated by comma"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "transport",
            "description": "A transport id or a list of transport ids separated by comma"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "transport.id": {
        "title": "transportId",
        "type": "integer",
        "description": "Transport ID. It is a unique integer in the HDT system."
      },
      "transport.code": {
        "title": "transportCode",
        "type": "string",
        "description": "It will be in \"targetDomain:targetPort\" form if transport type is \"ipport\", and in \"userAccount\" form if transport type is \"vpn\" or \"socks5\"."
      },
      "transport.type": {
        "title": "transportType",
        "type": "string",
        "description": "Transport type, i.e., \"ipport\", \"vpn\", or \"socks5\"."
      },
      "transport.name": {
        "title": "transportName",
        "type": "string",
        "description": "Transport name."
      },
      "transport.targetDomain": {
        "title": "targetDomain",
        "type": "string",
        "description": "A domain or IP address referring to the origin server of your application. HDT will access this domain/IP address to get data from origin server. When transport type is \"ipport\", this parameter is valid and required. A domain name's length can be up to 250 characters."
      },
      "transport.targetPort": {
        "title": "targetPort",
        "type": "integer",
        "description": "When transport type is \"ipport\", this parameter is valid and required. It must be an integer between 1 and 65535."
      },
      "transport.useFtp": {
        "type": "integer",
        "title": "useFtp",
        "description": "Indicates whether to use ftp transport. 0 means false, 1 means true.",
        "default": 0,
        "enum": [
          0,
          1
        ]
      },
      "transport.cName": {
        "type": "string",
        "title": "cName",
        "description": "The CNAME HDT generates for a transport. To accelerate using HDT, modify your DNS to point your access domain to this value.",
        "format": "hostname"
      },
      "transport.accessPort": {
        "title": "accessPort",
        "type": "integer",
        "description": "Access port of accelerated application for the public users. When transport type is 'ipport', the HDT API server will return an available access port. When useStandardPort is \"http\", this parameter will be 80; when useStandardPort is \"sni\" this parameter will be 443."
      },
      "transport.userAccount": {
        "title": "userAccount",
        "type": "string",
        "description": "User account for accessing the HDT system when transport type is \"vpn\" or \"socks5\".",
        "x-examples": {}
      },
      "transport.userPwd": {
        "title": "userPwd",
        "type": "string",
        "description": "User password for accessing the HDT system when transport type is \"vpn\" or \"socks5\"."
      },
      "transport.useUdp": {
        "type": "integer",
        "title": "useUdp",
        "description": "Indicates whether to use udp transport. 0:TCP, 1:UDP.",
        "enum": [
          0,
          1
        ],
        "default": 0
      },
      "transport.useStandardPort": {
        "title": "useStandardPort",
        "type": "string",
        "description": "Type of protocol that supports the port-sharing feature, such as \"http\", \"sni\". It is valid only for transport type \"ipport\". The valid values are fetched from the API \"hdt/transport-protocol-types\" and default value is empty string."
      },
      "transport.accessDomain": {
        "title": "accessDomain",
        "type": "string",
        "description": "Access domain of accelerated application for the public users. The HDT API supports multiple domains separated by commas and wildcard to match multiple subdomains. For example:\naaa.domain1.com,*.domain2.com,*.domain3.org.cn\n\nNote:\n1. The HDT API supports up to one level of subdomains for \"accessDomain\" field;\n2. \"accessDomain\" can't be empty; \n3. When \"useStandardPort\" is not empty, the combination of \"accessDomain\" and \"useStandardPort\" field must be globally unique;\n4. When \"useStandardPort\" is empty, the value of \"accessDomain\" is unique to each customer. Transports belong to the same customer can share \"accessDomain\". ",
        "x-examples": {
          "example-1": {
            "accessDomain": "aaa.domain1.com"
          },
          "example-2": {
            "accessDomain": "*.domain2.com"
          }
        }
      },
      "transport.status": {
        "type": "integer",
        "title": "transportStatus",
        "description": "Status of this transport. 1 means \"enabled\", while 0 means \"disabled\".",
        "x-examples": {
          "example-1": 1
        },
        "enum": [
          0,
          1
        ]
      },
      "transport.speedLimit": {
        "title": "speedLimit",
        "description": "Speed limit in \"Mbps\".It must be an integer between 0 and 1000. 0 means there is no limit. Default value is 0 ",
        "type": "number"
      },
      "transport.concurrentLimit": {
        "title": "concurrentLimit",
        "type": "integer",
        "description": "Number of concurrent connections allowed for the transport. It must be an integer between 0 and 32768. 0 means there is no limit. Default value is 0."
      },
      "transport.strategy": {
        "title": "transportStrategy",
        "type": "string",
        "description": "Transport strategy.\n\nDefault: Low cost and high efficiency.\nInteractive: For applications requiring better response times, HDT internal routing is enabled in this mode.\nHigh Concurrency：Suitable for small data transfers and high concurrency. Normally, concurrency is considered to be high when its value exceeds 1,000 connections and low when its value is below 100 connections.\nHigh Real-time: Suitable for applications delivering small data with low concurrency (fewer than 100 connections) and requiring optimized response times."
      },
      "transport.ipWhiteList": {
        "type": "string",
        "title": "ipWhiteList",
        "description": "IP address white-list. Valid values are IP address, IP address segment, IP address range, or the combination of them separated by semicolons. Spaces, tabs or line breaks can only appear in front of or behind IP address. The default value is a blank string.\n\nFor example:\nvalid:\n 11.11.12.3/20; 2.3.4.5-2.3.4.10;\n21.12.45.18\n\nInvalid:\n 11.11. 12.3/20;  2.3.4.5-2.3.\n4.10;\n21.12.45.18",
        "x-examples": {
          "example-1": {
            "ipWhiteList": "11.11.12.3/20;  2.3.4.5-2.3.4.10; 21.12.45.18"
          }
        }
      },
      "transport.comments": {
        "title": "comments",
        "type": "string",
        "description": "Enter notes about the transport."
      },
      "transport.transportData": {
        "title": "transport-data",
        "description": "A container of \"transportId\", \"transportCode\", \"transportType\", \"transportName\", \"status\" and some other elements describing a transport.",
        "x-examples": {
          "example-1": {
            "transportId": 0,
            "transportCode": "string",
            "transportType": "string",
            "transportName": "string",
            "status": 1,
            "accessDomain": "string",
            "accessPort": 0,
            "targetDomain": "string",
            "targetPort": 0
          }
        },
        "type": "object",
        "properties": {
          "transportId": {
            "$ref": "#/components/schemas/transport.id"
          },
          "transportCode": {
            "$ref": "#/components/schemas/transport.code"
          },
          "transportType": {
            "$ref": "#/components/schemas/transport.type"
          },
          "transportName": {
            "$ref": "#/components/schemas/transport.name"
          },
          "transportStatus": {
            "$ref": "#/components/schemas/transport.status"
          },
          "targetDomain": {
            "$ref": "#/components/schemas/transport.targetDomain"
          },
          "targetPort": {
            "$ref": "#/components/schemas/transport.targetPort"
          },
          "accessDomain": {
            "$ref": "#/components/schemas/transport.accessDomain"
          },
          "accessPort": {
            "$ref": "#/components/schemas/transport.accessPort"
          },
          "cName": {
            "$ref": "#/components/schemas/transport.cName"
          },
          "useFtp": {
            "$ref": "#/components/schemas/transport.useFtp"
          },
          "useStandardPort": {
            "$ref": "#/components/schemas/transport.useStandardPort"
          },
          "exitIp": {
            "$ref": "#/components/schemas/transport.exitIp"
          },
          "useUdp": {
            "$ref": "#/components/schemas/transport.useUdp"
          },
          "speedLimit": {
            "$ref": "#/components/schemas/transport.speedLimit"
          },
          "concurrentLimit": {
            "$ref": "#/components/schemas/transport.concurrentLimit"
          },
          "transportStrategy": {
            "$ref": "#/components/schemas/transport.transportStrategy"
          },
          "carryClientIp": {
            "$ref": "#/components/schemas/transport.carryClientIp"
          },
          "userAccount": {
            "$ref": "#/components/schemas/transport.userAccount"
          },
          "userPwd": {
            "$ref": "#/components/schemas/transport.userPwd"
          },
          "ipVersion": {
            "$ref": "#/components/schemas/transport.ipVersion"
          },
          "verifyPsb": {
            "$ref": "#/components/schemas/transport.verifyPsb"
          },
          "verifyIcp": {
            "$ref": "#/components/schemas/transport.verifyIcp"
          },
          "vip": {
            "$ref": "#/components/schemas/transport.vip"
          },
          "comments": {
            "$ref": "#/components/schemas/transport.comments"
          }
        }
      },
      "transport.deployId": {
        "title": "transport.deployId",
        "type": "integer",
        "description": "Indicates a transport configuration history ID. The ID is a unique integer to this transport."
      },
      "report.flowReport": {
        "title": "flow-report",
        "type": "object",
        "description": "A container for traffic information. It contains one <records-count> child element, one <upload-summary> child element, one <download-summary> child element and zero or more <flow-data> child elements indicating volume at different times.",
        "properties": {
          "records-count": {
            "$ref": "#/components/schemas/report.recordsCount"
          },
          "upload–summary": {
            "$ref": "#/components/schemas/report.uploadSummary"
          },
          "download-summary": {
            "$ref": "#/components/schemas/report.downloadSummary"
          },
          "flow-data": {
            "$ref": "#/components/schemas/report.flowData"
          }
        }
      },
      "report.recordsCount": {
        "title": "records-count",
        "type": "integer",
        "description": "Total number of records."
      },
      "report.uploadSummary": {
        "title": "upload -summary",
        "type": "integer",
        "description": "Total upload traffic volume in bytes for all records."
      },
      "report.downloadSummary": {
        "title": "download-summary",
        "type": "integer",
        "description": "Total download traffic volume in bytes for all records."
      },
      "report.flowData": {
        "title": "flow-data",
        "type": "array",
        "description": "A container of <timestamp>, <upload>, and <download> elements describing the traffic volume in bytes for a specified period of time.",
        "items": {
          "type": "object",
          "properties": {
            "timestamp": {
              "$ref": "#/components/schemas/report.timestamp"
            },
            "upload": {
              "$ref": "#/components/schemas/report.upload"
            },
            "download": {
              "$ref": "#/components/schemas/report.download"
            }
          }
        },
        "x-examples": {
          "example-1": [
            {
              "timestamp": "2014-07-31T23:05:00",
              "upload": 197421,
              "download": 297421
            },
            {
              "timestamp": "2014-07-31T23:10:00",
              "upload": 255564,
              "download": 155564
            },
            {
              "timestamp": "2014-07-31T23:15:00",
              "upload": 516326,
              "download": 316326
            },
            {
              "timestamp": "2014-07-31T23:20:00",
              "upload": 129685,
              "download": 329685
            },
            {
              "timestamp": "2014-07-31T23:25:00",
              "upload": 516326,
              "download": 316326
            },
            {
              "timestamp": "2014-07-31T23:30:00",
              "upload": 144774,
              "download": 144774
            }
          ]
        }
      },
      "report.timestamp": {
        "title": "timestamp",
        "type": "string",
        "description": "The timestamp is in RFC3339 format and includes the offset from UTC.\nIf interval from request is \"oneminute\" or \"fiveminutes\", the format will be \"YYYY-MM-DD hh:mm:00\", which indicates the end time of the interval.\nIf interval from request is \"hourly\", “daily”, or “monthly”, the format will be \"YYYY-MM-DD'T'hh:mm:00\", which indicates the start time of the interval.",
        "x-examples": {
          "example-1": "2014-07-31T23:05:00"
        }
      },
      "report.upload": {
        "title": "upload",
        "type": "integer",
        "description": "Upload traffic volume in bytes for a specified period of time."
      },
      "report.download": {
        "title": "download",
        "type": "integer",
        "description": "Download traffic volume in bytes during a specified period of time."
      },
      "report.requestsReport": {
        "title": "requests-report",
        "type": "object",
        "description": "A container for request count information. It contains <records-count>, <total-summary>, <success-summary>, and <requests-data> for a specified period of time.",
        "properties": {
          "records-count": {
            "$ref": "#/components/schemas/report.recordsCount"
          },
          "total-summary": {
            "$ref": "#/components/schemas/report.totalRequestsSummary"
          },
          "success-summary": {
            "$ref": "#/components/schemas/report.successRequestsSummary"
          },
          "requests-data": {
            "$ref": "#/components/schemas/report.requestsData"
          }
        }
      },
      "report.totalRequestsSummary": {
        "title": "total-summary",
        "type": "integer",
        "description": "Total number of requests for all records."
      },
      "report.successRequestsSummary": {
        "title": "success-summary",
        "type": "integer",
        "description": "Total number of successful requests for all records."
      },
      "report.requestsData": {
        "title": "requests-data",
        "type": "array",
        "description": "A container of <timestamp>, <total>, and <success> elements describing the request data for a specified period of time.",
        "items": {
          "type": "object",
          "properties": {
            "timestamp": {
              "$ref": "#/components/schemas/report.timestamp"
            },
            "total": {
              "$ref": "#/components/schemas/report.totalRequestsCount"
            },
            "success": {
              "$ref": "#/components/schemas/report.successRequestsCount"
            }
          }
        },
        "x-examples": {
          "example-1": [
            {
              "timestamp": "2014-07-31T23:05:00",
              "total": 200,
              "success": 200
            },
            {
              "timestamp": "2014-07-31T23:10:00",
              "total": 200,
              "success": 200
            },
            {
              "timestamp": "2014-07-31T23:15:00",
              "total": 100,
              "success": 100
            },
            {
              "timestamp": "2014-07-31T23:20:00",
              "total": 200,
              "success": 100
            },
            {
              "timestamp": "2014-07-31T23:25:00",
              "total": 200,
              "success": 200
            },
            {
              "timestamp": "2014-07-31T23:30:00",
              "total": 100,
              "success": 100
            }
          ]
        }
      },
      "report.totalRequestsCount": {
        "title": "total",
        "type": "integer",
        "description": "Total number of requests during the time period."
      },
      "report.successRequestsCount": {
        "title": "success",
        "type": "integer",
        "description": "Total number of successful requests during the time period."
      },
      "response.status": {
        "title": "status",
        "type": "integer",
        "x-examples": {
          "example-1": {}
        },
        "description": "0 or 1 to indicate whether response contains error or not. If 0, the request is handled successfully, and the expected result will be contained in 'content' field. Else the 'message' field will show the error details."
      },
      "response.message": {
        "title": "message",
        "type": "string",
        "description": "Shows the result or error message of the request."
      },
      "response.code": {
        "title": "response.code",
        "description": "Response code. When the request is failed, it will show the error code. When succeed, \"0\" will be returned.",
        "type": "string"
      },
      "transport.carryClientIp": {
        "type": "integer",
        "title": "carryClientIp",
        "description": "One of transport advanced configurations. Specify 0 or 1 to indicate whether carry client ip. 0: false, 1: TCP Option 0x4e, 2: Proxy Protocol v1, 3: Proxy Protocol v2.",
        "enum": [
          0,
          1,
          2,
          3
        ],
        "default": 0
      },
      "transport.verifyPsb": {
        "type": "integer",
        "title": "verifyPsb",
        "description": "Indicates whether the access domain has PSB Beian in China. 0: false, 1: true.",
        "enum": [
          0,
          1
        ],
        "default": 0
      },
      "transport.ipVersion": {
        "title": "ipVersion",
        "type": "integer",
        "description": "Shows what IP version will be supported. 1: IPv4, 2: IPv6, 3: IPv4+IPv6."
      },
      "transport.exitIp": {
        "title": "exitIp",
        "type": "string",
        "description": "Shield ip or domain"
      },
      "transport.transportStrategy": {
        "title": "transportStrategy",
        "description": "Transport strategy.\n\nDefault: Low cost and high efficiency. Interactive: For applications requiring better response times, HDT internal routing is enabled in this mode. High Concurrency：Suitable for small data transfers and high concurrency. Normally, concurrency is considered to be high when its value exceeds 1,000 connections and low when its value is below 100 connections. High Real-time: Suitable for applications delivering small data with low concurrency (fewer than 100 connections) and requiring optimized response times.",
        "type": "string"
      },
      "transport.vip": {
        "title": "vip",
        "type": "integer",
        "description": "Dedicated IP Service. 0: no, 1: yes."
      },
      "transport.verifyIcp": {
        "title": "verifyIcp",
        "description": "Indicates whether the access domain has ICP Beian in China. 0: false, 1: true.",
        "type": "integer"
      }
    },
    "parameters": {
      "Authorization": {
        "name": "Authorization",
        "in": "header",
        "description": "Authorization string for the request.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "Date": {
        "name": "Date",
        "in": "header",
        "description": "The date and time of the request.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "Content-Type": {
        "name": "Content-Type",
        "in": "header",
        "description": "The format of request data, supports \"application/json\" and \"application/xml\", default value is \"application/json\".",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "Accept-Encoding": {
        "name": "Accept-Encoding",
        "in": "header",
        "description": "Compression format of response data, either \"gzip\" or \"uncompressed\". The default value is \"uncompressed\".",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "Accept": {
        "name": "Accept",
        "in": "header",
        "description": "Response format, either \"application/json\" or \"application/xml\". The default value is \"application/json\".",
        "schema": {
          "type": "string"
        }
      },
      "Qtl-Request-Id": {
        "name": "Qtl-Request-Id",
        "in": "header",
        "description": "A string automatically generated by the API server to identify each request.",
        "schema": {
          "type": "string"
        }
      },
      "On-Behalf-Of": {
        "name": "On-Behalf-Of",
        "in": "header",
        "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make an API call on its behalf.",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic",
        "description": "All requests to CDNetworks' platform must be authenticated using an API login name and key assigned to your organization. For security, the API key is not passed directly but is secured as described below. \n\nThe authentication type is HTTP Basic, and the authorization string is specified in the HTTP request header called Authorization.\n```\n#!/bin/bash\n#URL of the CDN360 API server\nAPI_SERVER=https://ngapi.cdnetworks.com\n\n#You will be given the following information by the CDNetworks sales team\nUSER=\"{API user name}\"\nAPI_KEY=\"{API key (make sure to escape the $ sign if any)}\"\n\n#Date in RFC 1123 format\nDATE=`date \"+%a, %d %b %Y %H:%M:%S %Z\"`\n\n#Generate the password. Raw output from openssl by adding the \"-binary\" flag\npassw=$(echo -n \"$DATE\" | openssl dgst -sha1 -hmac \"$API_KEY\" -binary | base64)\necho \" \"\n\n#Construct the curl command to query list of applications\napiCall =\"curl -i --url '${API_SERVER}/hdt/v1/applications'\n                  -X GET\n                  -u $USER:$passw\n                  -H 'Date: $DATE'\n                  -H 'Accept: application/json'\"\neval $apiCall\necho \" \"\n```\n If you are a reseller, you can also specify a child customer's ID in an On-Behalf-Of HTTP header to make API calls to manage your child customer."
      }
    },
    "responses": {}
  },
  "tags": [
    {
      "name": "Transports",
      "description": "Call the Transports APIs to configure your HDT transports."
    },
    {
      "name": "Reports",
      "description": "Call the Reports APIs to get information about the usage of your HDT transports."
    }
  ]
}